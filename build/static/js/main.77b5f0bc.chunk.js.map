{"version":3,"sources":["App.tsx","ChooseDate.tsx","Modal.tsx","Line.tsx","Lines.tsx","times.tsx","Header.tsx","Save.tsx","reportWebVitals.ts","index.tsx"],"names":["month","ChooseDate","setDate","useState","day","setChosenDay","mon","setChosenMon","className","type","onChange","e","target","value","map","onClick","Modal","isCorrectDate","deleteIsWrongDate","classOverlay","classModal","push","closeModal","Fragment","join","id","href","title","Line","singleLine","toggleTask","addTask","hour","checked","complete","undefined","task","Lines","diary","line","times","Header","date","dayOfWeak","SaveBtn","localStorage","setItem","JSON","stringify","i","length","dateFull","Date","todayDiary","getItem","getDate","getMonth","b","parse","split","App","taskComplete","setTaskComplete","setIsCorrectDate","displayedDate","setDisplayedDate","getDay","dateInfo","selectedDay","selectedMonth","indexOf","trim","d","validateDate","selectedLine","newTaskData","hourInfo","Save","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77b5f0bc.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ChooseDate from './ChooseDate'\nimport Modal from './Modal'\nimport Lines from './Lines'\nimport times from './times'\nimport Header from './Header'\nimport SaveBtn from './Save'\nimport {SingleLine} from './types'\nimport {DateInfo } from './types'\n\ntype ToggleTask = (selectedTask:SingleLine) => void\ntype SetDate = (dateInfo:Array<string>) => void\ntype ValidateDate =(day:number, mon: number) => boolean\n\nconst diary:Array<SingleLine> = []\nfor (let i =0; i < times.length; i++) {\n  diary[i] = {hour: times[i], task: '', complete: false}\n}\n\nconst month: Array<string> = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nlet dateFull = new Date();\nlet todayDiary:Array<SingleLine> = []\nif (localStorage.getItem(`${dateFull.getDate()}/${dateFull.getMonth()}`)){\n  let b:any = localStorage.getItem(`${dateFull.getDate()}/${dateFull.getMonth()}`)\n  todayDiary = JSON.parse(b.split('}{'))\n} else {\n  todayDiary = diary\n}\n\n\nconst validateDate:ValidateDate = (day, mon) => {\n  let d = new Date(2021, mon, day);\n  if ((d.getMonth() === mon) && (d.getDate() === day)) {\n    return true;\n  } \n  return false\n}\n\nconst App:React.FC = () => {\n  const [taskComplete, setTaskComplete] = useState(todayDiary)\n  const [isCorrectDate, setIsCorrectDate] = useState(true)\n  const [displayedDate, setDisplayedDate] = useState<Array<number> | null>(null)\n\n  const toggleTask: ToggleTask = selectedLine => {\n    const newTaskData = taskComplete.map(hourInfo => {\n      if (hourInfo === selectedLine) {\n        return {\n          ...hourInfo,\n          complete: !hourInfo.complete\n        }\n      }\n      return hourInfo\n    })\n    setTaskComplete(newTaskData)\n  }\n\n  const addTask:ToggleTask = selectedLine => {\n    const newTaskData = taskComplete.map(hourInfo => {\n      if (hourInfo === selectedLine) {\n        return {\n          ...hourInfo,\n          task: selectedLine.task\n        }\n      }\n      return hourInfo\n    })\n    setTaskComplete(newTaskData)\n  }\n\n  const setDate:SetDate = dateInfo => {\n    const selectedDay = +(dateInfo[0]);\n    const selectedMonth = month.indexOf(dateInfo[1])\n    if (dateInfo[0].trim() === '' ||\n        dateInfo[0]==='Select month' ||\n        !validateDate(selectedDay, selectedMonth)) {\n      setIsCorrectDate(false)\n    } else {\n      if( localStorage.getItem(`${selectedDay}/${selectedMonth}`)) {\n        let b:any = localStorage.getItem(`${selectedDay}/${selectedMonth}`)\n        setTaskComplete(JSON.parse(b.split('}{')))\n      } else {\n        setTaskComplete(diary)\n      }\n      setDisplayedDate([selectedDay,selectedMonth])\n    }\n  }\n\n  const deleteIsWrongDate = () => {\n    setIsCorrectDate(true)\n  }\n\n  if (displayedDate !== null) {\n    dateFull = new Date(2021, displayedDate[1], displayedDate[0])\n  }\n  \n  const date:DateInfo = {\n    day: dateFull.getDate(),\n    dayOfWeak: dateFull.getDay(),\n    month: dateFull.getMonth()\n  }\n\n  return (\n    <React.Fragment>\n      <Modal isCorrectDate={isCorrectDate} deleteIsWrongDate={deleteIsWrongDate}/>\n      <div className='wrapper'>\n        <ChooseDate setDate={setDate}/>\n        <Header date={date}/>\n        <Lines diary={taskComplete} toggleTask={toggleTask} addTask={addTask}/>\n        <SaveBtn diary={taskComplete} date={date}/>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React, { useState} from 'react';\r\n\r\nconst month: Array<string> = ['Select month','January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\ninterface ChooseDateProps {\r\n  setDate: (dateInfo:Array<string>) => void\r\n}\r\n\r\n\r\n\r\nconst ChooseDate:React.FC<ChooseDateProps> = ({setDate}) => {\r\n  const [day, setChosenDay] = useState('')\r\n  const [mon, setChosenMon] = useState('')\r\n\r\n  const setDay = (e:React.ChangeEvent<HTMLInputElement>):void => {\r\n    setChosenDay(e.target.value)\r\n  }\r\n\r\n  const setMon = (e:React.ChangeEvent<HTMLSelectElement>):void => {\r\n    setChosenMon(e.target.value)\r\n  }\r\n\r\n  return(\r\n    <div className='chooseDate-wrapper'>\r\n      <input type='number' onChange={setDay}/>\r\n      <select onChange= {setMon}>\r\n        {\r\n          month.map(mon => {\r\n            return <option key={mon}>{mon}</option>\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={() =>setDate([day, mon])} className='btn-ok'>OK</button>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ChooseDate","import React from 'react';\r\n\r\ninterface ModalProps {\r\n  isCorrectDate: boolean\r\n  deleteIsWrongDate: ()=> void\r\n}\r\n\r\nconst Modal:React.FC<ModalProps> = ({isCorrectDate, deleteIsWrongDate}) => {\r\n  let classOverlay:Array<string> = ['modal-overlay'];\r\n  let classModal:Array<string> = ['modal'];\r\n  if (isCorrectDate) {\r\n    classOverlay.push('modal_closed')\r\n    classModal.push('modal_closed')\r\n  }\r\n\r\n  const closeModal =() => {\r\n    classOverlay.push('modal_closed')\r\n    classModal.push('modal_closed')\r\n    deleteIsWrongDate()\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classOverlay.join(' ')} key='overlay'></div>\r\n      <div className={classModal.join(' ')} id=\"modal\" key='modal'>\r\n        <a href=\"#\"\r\n          className=\"modal__close\"\r\n          id=\"modal-close\"\r\n          title=\"Close modal window\"\r\n          onClick={closeModal}>Close</a>\r\n        <p className= \"modal__info\">Incorrect date entered!</p>\r\n        <button id=\"modal-save\" className=\"modal__save\" title=\"Ok\" onClick={closeModal}>OK</button>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Modal","import React from 'react';\r\nimport {SingleLine} from './types'\r\n\r\ninterface LineProps {\r\n  singleLine: SingleLine\r\n  toggleTask: (selectedTask:SingleLine) => void\r\n  addTask: (selectedTask:SingleLine) => void\r\n}\r\n\r\nconst Line:React.FC<LineProps> =({singleLine, toggleTask, addTask}) => {\r\n  const handleChange = (e:React.ChangeEvent<HTMLInputElement>):void => {\r\n    singleLine.task = e.target.value\r\n    addTask(singleLine)\r\n  }\r\n\r\n  const handleDelete = (e:React.MouseEvent<HTMLButtonElement>):void => {\r\n    singleLine.task =''\r\n    addTask(singleLine)\r\n  }\r\n\r\n  return (\r\n    <div className='line-wrapper'>\r\n      <span>{singleLine.hour}</span>\r\n\r\n      <input\r\n      type='checkbox'\r\n      checked={singleLine.complete}\r\n      onChange = {() => toggleTask(singleLine)}/>\r\n\r\n      <input className = {singleLine.complete ? 'complete' : undefined}\r\n        type='text'\r\n        value = {singleLine.task}\r\n        onChange={handleChange}/>\r\n        <button onClick={handleDelete} className='btn-del'>DELETE</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Line","import React from 'react';\r\nimport Line from './Line'\r\n\r\ntype SingleLine = {\r\n  hour: string,\r\n  task: string,\r\n  complete: boolean\r\n}\r\n\r\ninterface LinesProps {\r\n  diary: Array<SingleLine>\r\n  toggleTask: (selectedTask:SingleLine) => void\r\n  addTask: (selectedTask:SingleLine) => void\r\n}\r\n\r\n\r\nconst Lines:React.FC<LinesProps> =({diary, toggleTask, addTask}) => {\r\n  return (\r\n    <React.Fragment>\r\n      {diary.map(line => {\r\n        return (\r\n          <Line key={line.hour}\r\n          singleLine ={line}\r\n          toggleTask ={toggleTask}\r\n          addTask ={addTask}/>\r\n        )\r\n      })}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Lines","const times: Array<string> = ['00.00-00.59', \r\n'01.00-01.59',\r\n'02.00-02.59',\r\n'03.00-03.59',\r\n'04.00-04.59',\r\n'05.00-05.59',\r\n'06.00-06.59',\r\n'07.00-07.59',\r\n'08.00-08.59',\r\n'09.00-09.59',\r\n'10.00-10.59',\r\n'11.00-11.59',\r\n'12.00-12.59',\r\n'13.00-13.59',\r\n'14.00-14.59',\r\n'15.00-15.59',\r\n'16.00-16.59',\r\n'17.00-17.59',\r\n'18.00-18.59',\r\n'19.00-19.59',\r\n'20.00-20.59',\r\n'21.00-21.59',\r\n'22.00-22.59',\r\n'23.00-23.59',\r\n]\r\n\r\nexport default times","import React from 'react';\r\n\r\ntype Date = {\r\n  day: number,\r\n  dayOfWeak:number,\r\n  month: number\r\n}\r\n\r\ninterface HeaderProps {\r\n  date: Date\r\n}\r\n\r\nconst Header:React.FC<HeaderProps> =({date}) => {\r\n  const days: Array<string> = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n  const month: Array<string> = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\n  return (\r\n    <div className='header-wrapper'>\r\n      <span>{days[date.dayOfWeak]}</span>\r\n      <span>{date.day}</span>\r\n      <span>{month[date.month]}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport {DateInfo } from './types'\r\nimport {SingleLine} from './types'\r\n\r\ninterface SaveBtnProps {\r\n  diary: Array<SingleLine>,\r\n  date: DateInfo \r\n}\r\n\r\nconst SaveBtn:React.FC<SaveBtnProps> =({diary, date}) => {\r\n  const addToStorage = (e:React.MouseEvent<HTMLButtonElement>):void => {\r\n    localStorage.setItem(`${date.day}/${date.month}`, JSON.stringify(diary));\r\n  }\r\n\r\n  return (\r\n    <button onClick={addToStorage} className='btn-save'>Save</button>\r\n  )\r\n}\r\n\r\nexport default SaveBtn;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}